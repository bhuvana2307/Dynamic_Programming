class Solution:
    def stoneGameIII(self, stoneValue: List[int]) -> str:

        ****Recursion****

        def find(alice,i):
            if i>=len(stoneValue):
                return 0
            tot=0
            res=float('-inf') if alice else float('inf')
            for x in range(1,4):
                if i+x>len(stoneValue):
                    break
                tot+=stoneValue[i+x-1]
                if alice:
                    res=max(res,tot+find(0,i+x))  
                else:
                    res=min(res,find(1,i+x))
            return res
        
        alice=find(1,0) # It will return the max value that alice can get if they both played optimally
        bob=sum(stoneValue)-alice # the remaining is bob's max value
        if alice>bob:
            return "Alice"
        elif bob>alice:
            return "Bob"
        return "Tie"

        *****Memoization******

        n=len(stoneValue)
        memo=[[-1]*2 for _ in range(n)]
        def find(alice,i):
            if i>=len(stoneValue):
                return 0
            if memo[i][alice]!=-1:
                return memo[i][alice]
            tot=0
            res=float('-inf') if alice else float('inf')
            for x in range(1,4):
                if i+x>len(stoneValue):
                    break
                tot+=stoneValue[i+x-1]
                if alice:
                    res=max(res,tot+find(0,i+x))  
                else:
                    res=min(res,find(1,i+x))
            memo[i][alice]=res
            return res
        
        alice=find(1,0)
        bob=sum(stoneValue)-alice 
        if alice>bob:
            return "Alice"
        elif bob>alice:
            return "Bob"
        return "Tie"
