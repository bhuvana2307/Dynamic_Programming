class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        #Recursion
        def find(i,buy,trans):
            if i>=len(prices):
                return 0
            if trans==2:
                return 0
            if buy:
                profit=max(-prices[i]+find(i+1,0,trans),find(i+1,1,trans))
            else:
                profit=max(prices[i]+find(i+1,1,trans+1),find(i+1,0,trans))
            return profit
                
        return find(0,1,0)

        #memoization
        memo={}
        def find(i,buy,trans):
            if (i,buy,trans) in memo:
                return memo[(i,buy,trans)]
            if i>=len(prices):
                return 0
            if trans==2:
                return 0
            if buy:
                profit=max(-prices[i]+find(i+1,0,trans),find(i+1,1,trans))
            else:
                profit=max(prices[i]+find(i+1,1,trans+1),find(i+1,0,trans))
            memo[(i,buy,trans)]=profit
            return profit
                
        return find(0,1,0)

        #table memoization
        memo=[[[-1 for _ in range(2)] for _ in range(2)] for _ in range(len(prices))]
        def find(i,buy,trans):
            
            if i>=len(prices):
                return 0
            if trans==2:
                return 0
            if memo[i][buy][trans] !=-1:
                return memo[i][buy][trans]
            if buy:
                profit=max(-prices[i]+find(i+1,0,trans),find(i+1,1,trans))
            else:
                profit=max(prices[i]+find(i+1,1,trans+1),find(i+1,0,trans))
            memo[i][buy][trans]=profit
            return profit
        return find(0,1,0)

        #Tabulation
        dp=[[[0 for _ in range(3)] for _ in range(2)] for _ in range(len(prices)+1)]
        for i in range(len(prices)-1,-1,-1):
            for buy in range(2):
                for trans in range(2):
                    if buy:
                        dp[i][buy][trans]=max(-prices[i]+dp[i+1][0][trans],dp[i+1][1][trans])
                    else:
                        dp[i][buy][trans]=max(prices[i]+dp[i+1][1][trans+1],dp[i+1][0][trans])
        return dp[0][1][0]
